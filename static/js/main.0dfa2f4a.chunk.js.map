{"version":3,"sources":["Components/Navbar.js","Components/Map.js","Components/CastTable.js","Components/GlobalCases.js","Components/DeathTable.js","Components/GlobalDeaths.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","Navbar","classes","AppBar","className","appbar","position","Toolbar","IconButton","color","aria-label","src","alt","Typography","variant","HtmlTooltip","withStyles","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","border","Tooltip","Map","props","state","viewport","width","height","latitude","longitude","zoom","data","axios","get","response","this","setState","onViewportChange","mapboxApiAccessToken","map","e","i","countryInfo","lat","long","key","Fragment","Grid","container","justify","country","style","display","flag","body1","margin","align","cases","active","deaths","Button","text","borderRadius","opacity","Component","padding","minWidth","paddingBottom","fontWeight","CaseTable","useState","setCase","useEffect","a","nums","sort","b","fetch","tabelcell","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","scope","toLocaleString","Globalcases","setCases","temp","h5","h4","DeathTable","GlobalDeaths","setDeaths","num","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0dfa2f4a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <AppBar className={classes.appbar} position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <img src=\"mask.png\" alt=\"mask-male\" />\r\n          </IconButton>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            Covid-19 Tracker\r\n          </Typography>\r\n          <IconButton\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <img src=\"mask-2.png\" alt=\"mask-female\" />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport ReactMapGL, { Marker } from \"react-map-gl\";\r\nimport axios from \"axios\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"../stylesheets/mapbox.css\";\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\n\r\nconst HtmlTooltip = withStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: \"#f5f5f9\",\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    maxWidth: 220,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    border: \"1px solid #dadde9\",\r\n  },\r\n}))(Tooltip);\r\n\r\nconst styles = (theme) => ({\r\n  text: {\r\n    padding: 0,\r\n  },\r\n  root: {\r\n    minWidth: 0,\r\n  },\r\n  body1: {\r\n    // borderBottom: \"1px solid grey\",\r\n    paddingBottom: \"3px\",\r\n    fontWeight: 500,\r\n    padding: 0,\r\n  },\r\n});\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        width: 800,\r\n        height: 780,\r\n        latitude: 25.355,\r\n        longitude: 20,\r\n        zoom: 1.5,\r\n      },\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const response = await axios.get(\r\n      \"https://disease.sh/v3/covid-19/countries\"\r\n    );\r\n    this.setState({ data: response.data });\r\n  }\r\n\r\n  render() {\r\n    const scaleCirle = (cases) => {\r\n      if (cases < 1000) {\r\n        return {\r\n          width: \"10px\",\r\n          height: \"10px\",\r\n          backgroundColor: \"yellow\",\r\n          borderRadius: \"50%\",\r\n          opacity: \"60%\",\r\n          border: \"0.5px solid black\",\r\n        };\r\n      } else if (cases < 5000) {\r\n        return {\r\n          width: \"20px\",\r\n          height: \"20px\",\r\n          backgroundColor: \"orange\",\r\n          borderRadius: \"50%\",\r\n          opacity: \"60%\",\r\n          border: \"0.5px solid black\",\r\n        };\r\n      } else if (cases < 10000) {\r\n        return {\r\n          width: \"30px\",\r\n          height: \"30px\",\r\n          backgroundColor: \"#ff0000b0\",\r\n          borderRadius: \"50%\",\r\n          opacity: \"60%\",\r\n          border: \"0.5px solid black\",\r\n        };\r\n      } else if (cases < 500000) {\r\n        return {\r\n          width: \"45px\",\r\n          height: \"45px\",\r\n          backgroundColor: \"red\",\r\n          borderRadius: \"50%\",\r\n          opacity: \"60%\",\r\n          border: \"0.5px solid black\",\r\n        };\r\n      } else {\r\n        return {\r\n          width: \"100px\",\r\n          height: \"100px\",\r\n          backgroundColor: \"red\",\r\n          borderRadius: \"50%\",\r\n          opacity: \"60%\",\r\n          border: \"0.5px solid black\",\r\n        };\r\n      }\r\n    };\r\n    const { classes } = this.props;\r\n    return (\r\n      <ReactMapGL\r\n        {...this.state.viewport}\r\n        onViewportChange={(viewport) => this.setState({ viewport })}\r\n        mapboxApiAccessToken=\"pk.eyJ1IjoiaWR1bm5vY29kaW5nOTUiLCJhIjoiY2tlMTFiMDh4NDF4cTJ5bWgxbDUxb2M5ciJ9.-L_x_0HZGSXFMRdactrn-Q\"\r\n      >\r\n        {this.state.data\r\n          ? this.state.data.map((e, i) => {\r\n              return (\r\n                <Marker\r\n                  latitude={e.countryInfo.lat}\r\n                  longitude={e.countryInfo.long}\r\n                  key={i}\r\n                >\r\n                  <HtmlTooltip\r\n                    title={\r\n                      <React.Fragment>\r\n                        <Grid container justify=\"center\">\r\n                          <img\r\n                            alt={e.country}\r\n                            style={{ width: \"35px\", display: \"block\" }}\r\n                            src={e.countryInfo.flag}\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid container justify=\"space-between\">\r\n                          <Typography variant=\"body2\" display=\"inline\">\r\n                            Country: &nbsp;{\" \"}\r\n                          </Typography>\r\n                          <Typography\r\n                            className={classes.body1}\r\n                            variant=\"body1\"\r\n                            display=\"inline\"\r\n                          >\r\n                            {e.country}\r\n                          </Typography>\r\n                        </Grid>\r\n\r\n                        <hr style={{ margin: \"5px 0px\" }} />\r\n\r\n                        <Grid container justify=\"space-between\">\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            display=\"inline\"\r\n                            align=\"left\"\r\n                          >\r\n                            Cases: &nbsp;{\" \"}\r\n                          </Typography>\r\n                          <Typography\r\n                            className={classes.body1}\r\n                            display=\"inline\"\r\n                            variant=\"body1\"\r\n                            align=\"right\"\r\n                          >\r\n                            {e.cases}\r\n                          </Typography>\r\n                        </Grid>\r\n\r\n                        <hr style={{ margin: \"5px 0px\" }} />\r\n\r\n                        <Grid container justify=\"space-between\">\r\n                          <Typography variant=\"body2\" display=\"inline\">\r\n                            Active: &nbsp;{\" \"}\r\n                          </Typography>\r\n                          <Typography\r\n                            className={classes.body1}\r\n                            display=\"inline\"\r\n                            variant=\"body1\"\r\n                          >\r\n                            {e.active}\r\n                          </Typography>\r\n                        </Grid>\r\n\r\n                        <hr style={{ margin: \"5px 0px\" }} />\r\n\r\n                        <Grid container justify=\"space-between\">\r\n                          <Typography variant=\"body2\" display=\"inline\">\r\n                            Deaths: &nbsp;{\" \"}\r\n                          </Typography>\r\n                          <Typography\r\n                            className={classes.body1}\r\n                            display=\"inline\"\r\n                            variant=\"body1\"\r\n                          >\r\n                            {e.deaths}\r\n                          </Typography>\r\n                        </Grid>\r\n                      </React.Fragment>\r\n                    }\r\n                  >\r\n                    <Button className={`${classes.text} ${classes.root}`}>\r\n                      {\" \"}\r\n                      <div style={scaleCirle(e.active)}></div>\r\n                    </Button>\r\n                  </HtmlTooltip>\r\n                </Marker>\r\n              );\r\n            })\r\n          : null}\r\n      </ReactMapGL>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Map);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst CaseTable = () => {\r\n  const [cases, setCase] = useState(0);\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const nums = await axios.get(\"https://disease.sh/v3/covid-19/countries\");\r\n      nums.data.sort((a, b) => {\r\n        return b.active - a.active;\r\n      });\r\n      setCase(nums.data);\r\n    };\r\n    fetch();\r\n  }, []);\r\n  //custome table styles\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      height: \"715px\",\r\n    },\r\n    tabelcell: {\r\n      fontWeight: 500,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  //=====================\r\n  return (\r\n    <TableContainer className={classes.root} component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Country/Region</TableCell>\r\n            <TableCell align=\"right\">Active Cases</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {cases !== 0 &&\r\n            cases.map((row) => (\r\n              <TableRow key={row.country}>\r\n                <TableCell\r\n                  className={classes.tabelcell}\r\n                  component=\"th\"\r\n                  scope=\"row\"\r\n                >\r\n                  {row.country}\r\n                </TableCell>\r\n                <TableCell className={classes.tabelcell} align=\"right\">\r\n                  {row.active.toLocaleString()}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CaseTable;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Typography, makeStyles } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport CaseTable from \"./CastTable\";\r\n\r\nconst Globalcases = () => {\r\n  const [cases, setCases] = useState(0);\r\n  useEffect(() => {\r\n    const temp = async () => {\r\n      const nums = await (await axios.get(\"https://disease.sh/v3/covid-19/all\"))\r\n        .data.active.toLocaleString();\r\n      setCases(nums);\r\n    };\r\n    temp();\r\n  }, []);\r\n\r\n  //custome style\r\n  const useStyles = makeStyles({\r\n    h5: {\r\n      fontWeight:\"bold\"\r\n    },\r\n    h4: {\r\n      color: \"red\"\r\n    }\r\n  })\r\n  const classes = useStyles();\r\n  //============================\r\n  \r\n  return (\r\n    <Fragment>\r\n      <Typography className={classes.h5} variant=\"h5\">\r\n        Active Cases\r\n      </Typography>\r\n      <Typography className={classes.h4} variant=\"h4\">\r\n        {cases}\r\n      </Typography>\r\n      <CaseTable />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Globalcases;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst DeathTable = () => {\r\n  const [cases, setCase] = useState(0);\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const nums = await axios.get(\"https://disease.sh/v3/covid-19/countries\");\r\n      nums.data.sort((a, b) => {\r\n        return b.deaths - a.deaths;\r\n      });\r\n      setCase(nums.data);\r\n    };\r\n    fetch();\r\n  }, []);\r\n  //custome table styles\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      height: \"715px\",\r\n    },\r\n    tabelcell: {\r\n      fontWeight: 500,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer className={classes.root} component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Country/Region</TableCell>\r\n            <TableCell align=\"right\">Death Cases</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {cases !== 0 &&\r\n            cases.map((row) => (\r\n              <TableRow key={row.country}>\r\n                <TableCell className={classes.tabelcell} component=\"th\" scope=\"row\">\r\n                  {row.country}\r\n                </TableCell>\r\n                <TableCell className={classes.tabelcell} align=\"right\">\r\n                  {row.deaths.toLocaleString()}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DeathTable;\r\n","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Typography, makeStyles } from \"@material-ui/core\";\r\nimport DeathTable from \"./DeathTable\";\r\n\r\nconst GlobalDeaths = () => {\r\n  //API call\r\n  const [deaths, setDeaths] = useState(0);\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const num = await axios.get(\"https://disease.sh/v3/covid-19/all\");\r\n      setDeaths(num.data.deaths.toLocaleString());\r\n    };\r\n    fetch();\r\n  }, []);\r\n  //custom MUI style\r\n  const useStyles = makeStyles({\r\n    h5: {\r\n      fontWeight: \"bold\",\r\n    },\r\n    h4: {\r\n      color: \"red\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  //==================\r\n  return (\r\n    <Fragment>\r\n      <Typography className={classes.h5} variant=\"h5\">\r\n        Global Deaths\r\n      </Typography>\r\n      <Typography className={classes.h4} variant=\"h4\">{deaths}</Typography>\r\n      <DeathTable />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default GlobalDeaths;\r\n","import React, { Fragment } from \"react\";\nimport Navbar from \"./Components/Navbar\";\nimport Map from \"./Components/Map\";\nimport Globalcases from \"./Components/GlobalCases\";\nimport GlobalDeaths from \"./Components/GlobalDeaths\";\nimport { Grid, Paper } from \"@material-ui/core\";\n\nconst App = () => {\n  return (\n    <Fragment>\n      <Navbar />\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-2\">\n            <Globalcases />\n          </div>\n          <div id='canvas' className=\"col-md-8 my-1\">\n            <Map />\n          </div>\n          <div className='col-md-2'>\n            <GlobalDeaths />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}